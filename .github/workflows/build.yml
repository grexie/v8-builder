name: Build V8

on:
  push:
    branches: [master]
    paths:
      - "V8_VERSION"
      - "CHROMIUM_VERSION"
      - "builders/**"
      - ".github/workflows/build.yml"

jobs:
  version_reader:
    name: Get version number
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.got_version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - id: got_version
        run: |
          cd $GITHUB_WORKSPACE
          echo "::set-output name=version::$(<./V8_VERSION)"

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos
            platform_name: macOS
            os: macos-latest
            arch: arm64
            arch_name: ARM64
            scheme: release
            scheme_name: Release
            shell_cmd: bash
            command: |
              cd $GITHUB_WORKSPACE
              bash ./builders/v8.sh
              cp ~/v8/v8.zip $GITHUB_WORKSPACE/v8.zip
          - platform: macos
            platform_name: macOS
            os: macos-latest
            arch: x64
            arch_name: x86-64
            scheme: release
            scheme_name: Release
            shell_cmd: bash
            command: |
              cd $GITHUB_WORKSPACE
              bash ./builders/v8.sh
              cp ~/v8/v8.zip $GITHUB_WORKSPACE/v8.zip
          - platform: macos
            platform_name: macOS
            os: macos-latest
            arch: arm64
            arch_name: ARM64
            scheme: debug
            scheme_name: Debug
            shell_cmd: bash
            command: |
              cd $GITHUB_WORKSPACE
              bash ./builders/v8.sh
              cp ~/v8/v8.zip $GITHUB_WORKSPACE/v8.zip
          - platform: ios
            platform_name: iOS
            os: macos-latest
            arch: arm64
            arch_name: ARM64
            scheme: release
            scheme_name: Release
            shell_cmd: bash
            command: |
              cd $GITHUB_WORKSPACE
              
              CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
              KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
              BUILD_CERTIFICATE="${{ secrets.BUILD_CERTIFICATE }}"
              P12_PASSWORD="${{ secrets.P12_PASSWORD }}"

              # import certificate and provisioning profile from secrets
              echo -n "${BUILD_CERTIFICATE}" | base64 --decode -o $CERTIFICATE_PATH

              # create temporary keychain
              security create-keychain -p "${P12_PASSWORD}" $KEYCHAIN_PATH
              security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
              security unlock-keychain -p "${P12_PASSWORD}" $KEYCHAIN_PATH

              # import certificate to keychain
              security import $CERTIFICATE_PATH -P "${P12_PASSWORD}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
              security list-keychain -d user -s $KEYCHAIN_PATH
              
              bash ./builders/v8.sh
              cp ~/v8/v8.zip $GITHUB_WORKSPACE/v8.zip
          - platform: ios
            platform_name: iOS
            os: macos-latest
            arch: x64
            arch_name: x86-64
            scheme: release
            scheme_name: Release
            shell_cmd: bash
            command: |
              cd $GITHUB_WORKSPACE
              bash ./builders/v8.sh
              cp ~/v8/v8.zip $GITHUB_WORKSPACE/v8.zip
          - platform: linux
            platform_name: Linux
            os: ubuntu-latest
            arch: arm64
            arch_name: ARM64
            scheme: release
            scheme_name: Release
            shell_cmd: bash
            command: |
              cd $GITHUB_WORKSPACE
              bash ./builders/v8.sh
              cp ~/v8/v8.zip $GITHUB_WORKSPACE/v8.zip
          - platform: linux
            platform_name: Linux
            os: ubuntu-latest
            arch: x64
            arch_name: x86-64
            scheme: release
            scheme_name: Release
            shell_cmd: bash
            command: |
              cd $GITHUB_WORKSPACE
              bash ./builders/v8.sh
              cp ~/v8/v8.zip $GITHUB_WORKSPACE/v8.zip
          - platform: android
            platform_name: Android
            os: ubuntu-latest
            arch: arm64
            arch_name: ARM64
            scheme: release
            scheme_name: Release
            shell_cmd: bash
            command: |
              cd $GITHUB_WORKSPACE
              bash ./builders/v8.sh
              cp ~/v8/v8.zip $GITHUB_WORKSPACE/v8.zip
          - platform: android
            platform_name: Android
            os: ubuntu-latest
            arch: arm
            arch_name: ARM
            scheme: release
            scheme_name: Release
            shell_cmd: bash
            command: |
              cd $GITHUB_WORKSPACE
              bash ./builders/v8.sh
              cp ~/v8/v8.zip $GITHUB_WORKSPACE/v8.zip
    name:
      Build ${{ matrix.scheme_name }} ${{ matrix.platform_name }} ${{
      matrix.arch_name }}
    runs-on: ${{ matrix.os }}
    needs: [version_reader, create_release]
    outputs:
      artifact: ${{ steps.artifact.outputs.artifact }}
    steps:
      - uses: actions/checkout@v2
      - name: Run build script
        run: ${{ matrix.command }}
        env:
          VERSION: ${{ needs.version_reader.outputs.version }}
          SCHEME: ${{ matrix.scheme }}
          PLATFORM: ${{ matrix.platform }}
          ARCH: ${{ matrix.arch }}
      - name: Upload Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/v8.zip
          asset_name:
            v8-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.scheme
            }}-${{ needs.version_reader.outputs.version }}.zip
          asset_content_type: application/zip

  build_windows:
    name: Build Release Windows x86-64
    runs-on: windows-2019
    needs: [version_reader, create_release]
    outputs:
      artifact: ${{ steps.artifact.outputs.artifact }}
    steps:
      - uses: actions/checkout@v2
      - uses: seanmiddleditch/gha-setup-ninja@master
      - name: Run build script
        shell: cmd
        run: |
          ./builders/v8-windows.cmd ${{ needs.version_reader.outputs.version }}
        env:
          VERSION: ${{ needs.version_reader.outputs.version }}
          SCHEME: ${{ matrix.scheme }}
          PLATFORM: ${{ matrix.platform }}
          ARCH: ${{ matrix.arch }}
      - name: Upload Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}\v8.zip
          asset_name:
            v8-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.scheme
            }}-${{ needs.version_reader.outputs.version }}.zip
          asset_content_type: application/zip

  headers:
    name: Headers and Documentation
    runs-on: ubuntu-latest
    needs: [create_release, version_reader]
    steps:
      - uses: actions/checkout@v2
      - name: Generate documentation
        run: |
          cd $GITHUB_WORKSPACE
          sh ./builders/v8-docs.sh ${{ needs.version_reader.outputs.version }}
      - name: Build Archives
        run: |
          cd ~/docs/html
          zip -r ${{ github.workspace }}/docs.zip .
          cd ~/v8/v8/include
          zip -r ${{ github.workspace }}/headers.zip .
          cp ~/v8/v8/LICENSE.v8 ${{ github.workspace }}/LICENSE.v8
      - name: Upload Documentation
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/docs.zip
          asset_name: v8-docs-${{ needs.version_reader.outputs.version }}.zip
          asset_content_type: application/zip
      - name: Upload Headers
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/headers.zip
          asset_name: v8-headers-${{ needs.version_reader.outputs.version }}.zip
          asset_content_type: application/zip
      - name: Upload License
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/LICENSE
          asset_name: LICENSE
          asset_content_type: text/plain

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [version_reader]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version_reader.outputs.version }}
          release_name: v${{ needs.version_reader.outputs.version }}
          draft: true
          prerelease: false
