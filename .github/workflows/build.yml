name: Build V8

on:
  push:
    branches: [master]
    paths:
      - "V8_VERSION"
      - "CHROMIUM_VERSION"
      - "builders/**"
      - ".github/workflows/build.yml"

jobs:
  version_reader:
    name: Get version number
    runs-on: ubuntu-latest
    outputs:
      v8_version: ${{ steps.got_version.outputs.v8_version }}
      chromium_version: ${{ steps.got_version.outputs.chromium_version }}
    steps:
      - uses: actions/checkout@v2
      - id: got_version
        run: |
          cd $GITHUB_WORKSPACE
          echo "::set-output name=v8_version::$(<./V8_VERSION)"
          echo "::set-output name=chromium_version::$(<./CHROMIUM_VERSION)"

  build:
    strategy:
      matrix:
        scheme: [release]
        platform: [macos, linux, windows, android]
        arch: [arm64, x64, x86, arm]
        include:
          - platform: macos
            platform-name: macOS
            runs-on: macos-latest
            assets: |
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/*.dylib
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/**/*.a
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/*.dat
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/bytecode_builtins_list_generator
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/gen-regexp-special-case
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/mksnapshot
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/torque
          - platform: android
            platform-name: Android
            runs-on: ubuntu-latest
            assets: |
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/*.so
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/**/*.a
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/*.dat
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/clang_*/bytecode_builtins_list_generator
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/clang_*/gen-regexp-special-case
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/clang_*/mksnapshot
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/clang_*/torque
          - platform: linux
            platform-name: Linux
            runs-on: ubuntu-latest
            assets: |
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/*.so
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/**/*.a
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/*.dat
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/bytecode_builtins_list_generator
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/gen-regexp-special-case
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/mksnapshot
              ~/v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/torque
          - name: windows
            platform-name: Windows
            runs-in: windows-latest
            assets: |
              v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/*.dll
              v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/*.lib
              v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/*.exp
              v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/*.ilk
              v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/*.exe
              v8/v8/out.gn/${{ matrix.arch.slug }}.${{ matrix.arch.scheme }}/*.dat
          - arch: arm64
            arch-name: ARM64
          - arch: x64
            arch-name: x86-64
          - arch: x86
            arch-name: x86
          - arch: arm
            arch-name: ARM v7
          - scheme: release
            scheme-name: Release
          - scheme: debug
            scheme-name: Debug
    
    name: ${{ matrix.scheme-name }} Build ${{ matrix.platform-name }} ${{ matrix.arch-name }}
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v2
      - name: Run build script
        run: |
          cd $GITHUB_WORKSPACE
          sh ./builders/v8.sh ${{ needs.version_reader.outputs.v8_version }}
        env:
          SCHEME: ${{ matrix.scheme }}
          PLATFORM: ${{ matrix.platform }}
          ARCH: ${{ matrix.arch }}
      - uses: actions/upload-artifact@v2
        with:
          name: v8-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.scheme }}
          path: ${{ matrix.assets }}
      - id: artifact
        run: |
          cd $GITHUB_WORKSPACE
          echo "::set-output name=artifact::v8-${{ matrix.platform }}-${{ matrix-arch }}-${{ matrix.scheme }}"
     
            
  headers:
    name: Headers and Documentation
    runs-on: ubuntu-18.04
    needs: version_reader
    steps:
      - uses: actions/checkout@v2
      - name: Generate documentation
        run: |
          cd $GITHUB_WORKSPACE
          sh ./builders/v8-docs.sh ${{ needs.version_reader.outputs.v8_version }}
      - uses: actions/upload-artifact@v2
        with:
          name: headers
          path: "~/v8/v8/include"
      - uses: actions/upload-artifact@v2
        with:
          name: license
          path: "~/v8/v8/LICENSE.v8"
      - uses: actions/upload-artifact@v2
        with:
          name: documentation
          path: "~/docs"

          
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version_reader.outputs.v8_version }}
          release_name:
            v${{ needs.version_reader.outputs.v8_version }}
          draft: true
          prerelease: false
        
  upload-release:
    name: Upload Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: ${{ needs.build.outputs.artifact }}
      - name: Build Archive
        run: |
          zip -r ${{ needs.build.outputs.artifact }}.zip ${{ needs.build.outputs.artifact }}
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.artifact }}.zip
          asset_name: ${{ needs.build.outputs.artifact }}-${{ needs.version_reader.outputs.v8_version }}.zip
          asset_content_type: application/zip

  upload-docs:
    name: Upload Documentation and Headers
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: ${{ needs.build.outputs.artifact }}
      - name: Build Archive
        run: |
          zip -r ${{ needs.build.outputs.artifact }}.zip ${{ needs.build.outputs.artifact }}
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.artifact }}.zip
          asset_name: ${{ needs.build.outputs.artifact }}-${{ needs.version_reader.outputs.v8_version }}.zip
          asset_content_type: application/zip
