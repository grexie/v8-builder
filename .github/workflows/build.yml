name: Build V8

on:
  push:
    branches: [master]
    paths:
      - "V8_VERSION"
      - "CHROMIUM_VERSION"
      - "builders/**"
      - ".github/workflows/build.yml"

jobs:
  version_reader:
    name: Get version number
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.got_version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - id: got_version
        run: |
          cd $GITHUB_WORKSPACE
          echo "::set-output name=version::$(<./V8_VERSION)"

  build:
    strategy:
      matrix:
        include:
          - platform_slug: macos
            platform_name: macOS
            os: macos-latest
          - platform_slug: android
            platform_name: Android
            os: ubuntu-latest
          - platform_slug: linux
            platform_name: Linux
            os: ubuntu-latest
          - platform_slug: windows
            platform_name: Windows
            os: windows-latest
          - arch_slug: arm64
            arch_name: ARM64
          - arch_slug: x64
            arch_name: x86-64
          - arch_slug: x86
            arch_name: x86
          - arch_slug: arm
            arch_name: ARM v7
          - scheme_slug: release
            scheme_name: Release
          - scheme_slug: debug
            scheme_name: Debug
        exclude:
          - platform_slug: windows
            arch_slug: arm64
          - platform_slug: windows
            arch_slug: arm
          - platform_slug: macos
            arch_slug: arm
          - platform_slug: macos
            arch_slug: x86

    name:
      Build ${{ matrix.scheme_name }} ${{ matrix.platform_name }} ${{
      matrix.arch_name }}
    runs-on: ${{ matrix.os }}
    needs: [version_reader, create_release]
    outputs:
      artifact: ${{ steps.artifact.outputs.artifact }}
    steps:
      - uses: actions/checkout@v2
      - name: Run build script
        run: |
          cd $GITHUB_WORKSPACE
          sh ./builders/v8.sh
        env:
          VERSION: ${{ needs.version_reader.outputs.version }}
          SCHEME: ${{ matrix.scheme_slug }}
          PLATFORM: ${{ matrix.platform_slug }}
          ARCH: ${{ matrix.arch_slug }}
      - uses: actions/upload-artifact@v2
        with:
          name:
            v8-${{ matrix.platform_slug }}-${{ matrix.arch_slug }}-${{
            matrix.scheme_slug }}
          path: ~/v8/v8.zip
      - id: artifact
        run: |
          cd $GITHUB_WORKSPACE
          echo "::set-output name=artifact::v8-${{ matrix.platform_slug }}-${{ matrix.arch_slug }}-${{ matrix.scheme_slug }}"

  headers:
    name: Headers and Documentation
    runs-on: ubuntu-18.04
    needs: [create_release, version_reader]
    steps:
      - uses: actions/checkout@v2
      - name: Generate documentation
        run: |
          cd $GITHUB_WORKSPACE
          sh ./builders/v8-docs.sh ${{ needs.version_reader.outputs.version }}
      - uses: actions/upload-artifact@v2
        with:
          name: headers
          path: "~/v8/v8/include"
      - uses: actions/upload-artifact@v2
        with:
          name: license
          path: "~/v8/v8/LICENSE.v8"
      - uses: actions/upload-artifact@v2
        with:
          name: documentation
          path: "~/docs"

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [version_reader]
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version_reader.outputs.version }}
          release_name: v${{ needs.version_reader.outputs.version }}
          draft: true
          prerelease: false

  upload_release:
    name: Upload Release
    needs: [build, version_reader, create_release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: ${{ needs.build.outputs.artifact }}
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: v8.zip
          asset_name:
            v8-${{ needs.build.outputs.artifact }}-${{
            needs.version_reader.outputs.version }}.zip
          asset_content_type: application/zip

  upload-docs:
    name: Upload Documentation and Headers
    needs: [headers, create_release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: docs
      - uses: actions/download-artifact@v2
        with:
          path: headers
      - uses: actions/download-artifact@v2
        with:
          path: license
      - name: Build Archive
        run: |
          zip -r docs.zip docs
          zip -r headers.zip headers
      - name: Upload Docs
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: docs.zip
          asset_name: v8-docs-${{ needs.version_reader.outputs.version }}.zip
          asset_content_type: application/zip
      - name: Upload Headers
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: headers.zip
          asset_name: v8-headers-${{ needs.version_reader.outputs.version }}.zip
          asset_content_type: application/zip
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: license
          asset_name: LICENSE
          asset_content_type: text/plain
